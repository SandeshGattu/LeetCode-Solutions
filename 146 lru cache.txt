class LRUCache:

    def __init__(self, capacity: int):
        self.sts={}
        self.d=[]
        self.cp=capacity
    def get(self, key: int) -> int:
        if key in self.sts:
            t=self.d.index(key)
            self.d.pop(t)
            self.d.append(key)
            return self.sts[key]
        else:
            return -1
    
    def put(self, key: int, value: int) -> None:
        if key in self.sts:
            t=self.d.index(key)
            self.d.pop(t)
            self.d.append(key)
            self.sts[key]=value
        elif self.cp==len(self.sts):
            m=self.d.pop(0)
            del self.sts[m]
            self.d.append(key)
            self.sts[key]=value
        else:
            self.d.append(key)
            self.sts[key]=value
            
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)